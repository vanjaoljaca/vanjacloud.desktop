import 'web-streams-polyfill';
// In the main process:
import { app, BrowserWindow, session } from 'electron';
import { Menu, Tray, nativeImage, globalShortcut } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isDevelopment = process.env.NODE_ENV == 'development';
const isProd = !isDevelopment;

import { ipcMain } from 'electron';
import Backend from './backend/backend';

// sigh electron IPC api is so bad why is it like this WHY
// https://www.electronjs.org/docs/latest/tutorial/ipc
/* summary seems to be
   ipcRenderer.send -> ipcMain.on (fire and forget) 
   ipcRenderer.invoke -> ipcMain.handle (with response somehow..)
   main.??? -> ipcRenderer.???
*/

// import vanjacloud from 'vanjacloudjs.shared';

// console.log(vanjacloud)


import AutoLaunch from "auto-launch";

class Frontend {

}

// ok there's a chicken and egg problem brewing here. if only we had an ipc class...
const frontend = new Frontend();
const backend = new Backend(frontend);

ipcMain.handle('', (event, arg) => {
  /*
  This is the handler on the 'main' thread aka backend.
  It has received a message from a renderer.
  Send it to the backend and return the response.
   */
  return backend.request(event, arg);
})

ipcMain.on('', (event, arg) => {
  /*
  I think this is like handle but async
   */
  backend.accept(event, arg);
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

async function doDevStuff() {
  backend.request('', 'dev')
}

const createWindow = async () => {
  const mainWindow = new BrowserWindow({
    height: 400,
    width: 520,
    frame: false,
    titleBarStyle: 'customButtonsOnHover',
    title: 'vanjacloudtop',
    show: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      webSecurity: false
    },
    alwaysOnTop: true
  });


  // Always on top thing TODO
  mainWindow.setAlwaysOnTop(true, 'screen-saver');
  mainWindow.setVisibleOnAllWorkspaces(true, { visibleOnFullScreen: true });

  if (isDevelopment) {
    mainWindow.setSize(800, 600);
    mainWindow.webContents.openDevTools();
    mainWindow.show()
    mainWindow.title = 'vanjacloudtop (dev)'

    await doDevStuff();
  }

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();


  session.defaultSession.webRequest.onHeadersReceived((details, callback) => {
    // details.responseHeaders['Content-Security-Policy'] =
    //   "default-src 'self' 'unsafe-inline' data:; connect-src https://api.notion.com";

    // details.responseHeaders['Content-Security-Policy'] = [
    //   "default-src 'self' 'unsafe-inline' data:; connect-src https://api.notion.com; script-src 'self' 'unsafe-inline' 'unsafe-eval' data:"
    // ];

    const allowedUrls = [
      'https://api.notion.com',
      'ws://localhost:3000',
      'https://api.cognitive.microsofttranslator.com',
      'https://api.openai.com/',
      'https://huggingface.com',
      'http://localhost:3000'
    ]
    const csp = "default-src 'self' 'unsafe-inline' data:; connect-src "
      + allowedUrls.join(' ') + "; script-src 'self' 'unsafe-inline' 'unsafe-eval' data:"
    details.responseHeaders['Content-Security-Policy'] = [
      csp
    ];

    callback({ responseHeaders: details.responseHeaders });
  });

};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.


// eslint-disable-next-line @typescript-eslint/no-unused-vars
let trayHolder = null
app.whenReady().then(() => {
  const trayImg = isDevelopment
    ? 'NSImageNameQuickLookTemplate'
    : 'NSHomeTemplate';
  const img = nativeImage.createFromNamedImage(trayImg);
  const tray = new Tray(img)
  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Hide', type: 'radio', click: async () => {
        console.log('clicked');
        const r = await app.dock.hide();
        console.log('hide dock r', r);
      }
    },
    {
      label: 'Show', type: 'radio', checked: true, click: async () => {
        console.log('clicked');
        const r = await app.dock.show();
        console.log('show dock r', r);
      }
    },
    {
      label: 'Open', type: 'radio', checked: true, click: async () => {
        console.log('clicked');
        const r = await createWindow();
        console.log('show dock r', r);
      }
    },
    {
      label: 'Quit', type: 'radio', checked: true, click: async () => {
        console.log('quitting');
        const r = await app.quit();
        console.log('quit r', r);
      }
    }
  ])
  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)
  trayHolder = tray;
})

app.whenReady().then(() => {
  createWindow();
  const accelerator = isDevelopment
    ? 'Shift+CommandOrControl+:'
    : "Shift+CommandOrControl+\\"
  const r1 = globalShortcut.register(accelerator, () => {
    // .setVisibleOnAllWorkspaces(true)
    const w = BrowserWindow.getAllWindows();

    if (w.length == 0) {
      createWindow();
    }

    const focussed = BrowserWindow.getFocusedWindow();
    if (focussed == w[0]) {
      try {
        w[0].hide();
      } catch (error) {
        console.log('hide error (w, focussed, error)', w[0], focussed, error);
      }

    } else {
      w[0].show();
    }
  })
  if (r1 == false) {
    console.log('hotkey registration failed')
  }
})

const appAutoLauncher = new AutoLaunch({
  name: 'vanjacloudtop',
  path: '/Users/voljaca/Applications/vanjacloudtop.app',
});

async function doAppLauncher() {
  if (isDevelopment) {
    if (await appAutoLauncher.isEnabled()) {
      await appAutoLauncher.disable()
    }
  }

  if (isProd) {
    if (!(await appAutoLauncher.isEnabled())) {
      await appAutoLauncher.enable();
      console.log('Enabling auto done');
    }
  }
}

doAppLauncher()

app.dock.hide();
