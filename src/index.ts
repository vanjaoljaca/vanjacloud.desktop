import { app, BrowserWindow } from 'electron';
import { Menu, Tray, nativeImage, globalShortcut } from 'electron';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

import { ipcMain } from 'electron';
import test from './backend';

import MyModule from 'vanjacloudjs.shared';

console.log('Hello from BACKEND!!!!!!');
console.log(MyModule)

test().then((res) => {
  console.log(res);
});

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  // mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.



// eslint-disable-next-line @typescript-eslint/no-unused-vars
let trayHolder = null
app.whenReady().then(() => {
  console.log('ready...')
  const img = nativeImage.createFromNamedImage('NSCaution');
  const tray = new Tray(img)
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' }
  ])
  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)
  trayHolder = tray;
})

app.whenReady().then(() => {
  console.log('ready...!!')
  const r1 = globalShortcut.register('Shift+CommandOrControl+:', () => {
    console.log(': is pressed')
    // .setVisibleOnAllWorkspaces(true)
    BrowserWindow.getAllWindows()[0].show();

  })
  if (r1 == false) {
    console.log('hotkey registration failed')
  }
})